# This device is an ESP32-C3-DevKitM-1. The device is connected to an
# Ikea Frekvens LED panel with custom wiring.
#
# See the wiring diagram:
#  https://github.com/frumperino/FrekvensPanel/blob/master/frekvens-hacking.pdf
#
# The esphome component is here:
#  https://github.com/phiten/esphome-ikea-led-matrix

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain

# Enable logging
logger:

# Enable Home Assistant API and OTA updates
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

esphome:
  name: frekvens
  platformio_options:
    lib_deps:
      - Wire                            # Also required by GFX.
      - SPI                             # Also required by GFX.
      - adafruit/Adafruit BusIO         # Required by GFX Library.
      - adafruit/Adafruit GFX Library   # Required for FrekvensPanel.

esp32:
  board: esp32-c3-devkitm-1

external_components:
  - source:
      type: git
      url: https://github.com/allenporter/esphome-ikea-led-matrix
      ref: main
    components:
      - frekvens_panel

light:
  - platform: monochromatic
    name: 'Brightness'
    id: brightness
    output: matrix_brightness
    restore_mode: RESTORE_DEFAULT_ON

select:
  # A switch that controls what is displayed. The yellow button
  # toggles through these options.
  - platform: template
    name: Display Mode
    id: mode
    options:
      - "Time"
      - "Date"
      - "Weekday"
      - "Temperature"
    initial_option: "Time"
    optimistic: true
    restore_value: true
    set_action:
      - logger.log:
          format: "Selected mode: %s"
          args: ["x.c_str()"]

output:
  - platform: ledc  #esp8266_pwm
    # Enables brightness control.
    max_power: 0.05
    id: matrix_brightness
    pin:
      number: GPIO02
      inverted: True

time:
  - platform: sntp
    id: ntp_time
    timezone: 'America/Los_Angeles'

font:
  - file: "../config/fonts/04B03.ttf"
    id: digi8
    size: 8
  - file: "../config/fonts/04B03.ttf"
    id: digi5
    size: 5

binary_sensor:
  # There are three wires for the switches on the back of the device. The red
  # wire is common. The black wire is for the red button. The white wire is
  # for the yellow button. The red wire is routed to ground, and the switches
  # are inverted. They are sensitive, so add a delay to cut false positives
  - platform: gpio
    pin:
      number: GPIO8
      inverted: true
    name: "Red Button"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        - light.toggle: brightness

  - platform: gpio
    pin:
      number: GPIO9
      inverted: true
    name: "Yellow Button"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        - select.next: mode

text_sensor:
  - platform: homeassistant
    id: temperature
    entity_id: sensor.weather_temperature
  - platform: homeassistant
    id: humidity
    entity_id: sensor.weather_humidity

display:
  - platform: frekvens_panel
    id: panel
    latch_pin: 03
    clock_pin: 04
    data_pin: 05
    lambda: |-
      auto time = id(ntp_time).now();
      if (time.month == 4 && time.day_of_month == 1) {
        time.increment_day();
      }
      auto active = id(mode).active_index();
      if (active.value() == 1) {
        // month, day
        it.strftime(1, 0, id(digi8), "%b", time);
        it.strftime(4, 8, id(digi8), "%d", time);
        return;
      }
      if (active.value() == 2) {
        // weekday
        it.strftime(1, 4, id(digi8), "%a", time);
        return;
      }
      if (active.value() == 3) {
        it.printf(1, 0, id(digi8), "%2sF", id(temperature).state.c_str());
        it.printf(1, 8, id(digi8), "%2s%%", id(humidity).state.c_str());
        return;
      }
      // Default: hour, minute, am/pm
      it.strftime(1, 0, id(digi8), "%I", time);
      it.strftime(1, 8, id(digi8), "%M", time);
      if (time.hour >= 12) {
        it.print(11, 8, id(digi8), "P");
      } else {
        it.print(11, 8, id(digi8), "A");
      }
